{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "656aa2ee",
   "metadata": {},
   "source": [
    "# Encode spike timing/ISI to symbols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63cb9b06",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "from scipy import stats\n",
    "from scipy.stats import mannwhitneyu as mw\n",
    "from scipy.stats import sem\n",
    "from scipy.stats import iqr\n",
    "from scipy.stats import ttest_ind\n",
    "from scipy.stats import ttest_rel\n",
    "from scipy.stats import wilcoxon\n",
    "\n",
    "import random\n",
    "\n",
    "import math\n",
    "\n",
    "import EntropyHub as EH\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import time\n",
    "\n",
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "\n",
    "import neo\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e327e910",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('spt_isi.csv') #open file generated with 1 NEX to CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc75ef2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def toFixed(numObj, digits=0):\n",
    "    return f\"{numObj:.{digits}f}\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93d9cd02",
   "metadata": {},
   "outputs": [],
   "source": [
    "# spikes in bins function\n",
    "\n",
    "\n",
    "def sib(isi_list):\n",
    "    bins_num = int(np.sum(isi_list) // (1.6 * np.min(isi_list)))\n",
    "    spt_times = [0]\n",
    "    for el in isi_list:\n",
    "        spt_times.append(spt_times[-1] + float(el))\n",
    "    res = np.histogram(spt_times, bins=bins_num)[0]\n",
    "    while len(res[res > 1]) != 0:\n",
    "        bins_num += 1\n",
    "        res = np.histogram(spt_times, bins=bins_num)[0]\n",
    "    return list(res), bins_num\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8eceb608",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ISI to mean ISI function\n",
    "\n",
    "\n",
    "def isitm(isi_list):\n",
    "    mean_isi = np.mean(isi_list)\n",
    "    res = []\n",
    "    for el in isi_list:\n",
    "        if el >= mean_isi:\n",
    "            res.append(1)\n",
    "        else:\n",
    "            res.append(0)\n",
    "    return res\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4fbc280",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ISI to ISI function\n",
    "\n",
    "\n",
    "def isitisi(isi_list, dig=4):\n",
    "    res = []\n",
    "    for i in range(len(isi_list) - 1):\n",
    "        i_1 = float(toFixed(isi_list[i + 1], digits=dig))\n",
    "        i_0 = float(toFixed(isi_list[i], digits=dig))\n",
    "        if i_1 > i_0:\n",
    "            res.append(3)\n",
    "        elif i_1 == i_0:\n",
    "            res.append(2)\n",
    "        elif i_1 < i_0:\n",
    "            res.append(1)\n",
    "    return res\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7e313ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# isi_list = df['isi_list'][0].strip('][').split(', ')\n",
    "# isi_list = [float(j) for j in isi_list]\n",
    "# assib(isi_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87a11f82",
   "metadata": {},
   "outputs": [],
   "source": [
    "sib_res_1 = []  # spiketrain histogram\n",
    "sib_res_2 = []  # spiketrain histogram optimal bins\n",
    "isitm_res = []\n",
    "isitisi_res = []\n",
    "\n",
    "for i in range(len(df)):\n",
    "    print(\"Нейрон №\", i + 1)\n",
    "    isi_list = df[\"isi_list\"][i].strip(\"][\").split(\", \")\n",
    "    isi_list = [float(j) for j in isi_list]\n",
    "\n",
    "    sib_res = sib(isi_list)\n",
    "    sib_res_1.append(sib_res[0])\n",
    "    sib_res_2.append(sib_res[1])\n",
    "\n",
    "    isitm_res.append(isitm(isi_list))\n",
    "\n",
    "    isitisi_res.append(isitisi(isi_list))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c015953",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sib']=sib_res_1\n",
    "df['sib_bins']=sib_res_2\n",
    "df['isitm']=isitm_res\n",
    "df['isitisi']=isitisi_res\n",
    "# df['assib_hist']=assib_res_1\n",
    "# df['assib']=assib_res_2\n",
    "df.to_csv('encoded_isi_v3.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16245f71",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
